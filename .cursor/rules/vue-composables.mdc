---
alwaysApply: true
---

# Vue Composables Best Practices

## Core Rules

### 1. Check VueUse First
**Always check [VueUse](https://vueuse.org/) before creating composables**

Use the `context7` tools to search VueUse official documentation for existing solutions.

```typescript
// ❌ Don't reinvent
export function useLocalState(key: string, defaultValue: any) {
  // custom localStorage logic...
}

// ✅ Use VueUse
import { useLocalStorage } from '@vueuse/core'
export function useSettings() {
  return useLocalStorage('settings', defaultSettings)
}
```

### 2. Never Make Composables Async
```typescript
// ❌ Don't return promises
export async function useUserData() {
  const user = await fetchUser()
  return { user }
}

// ✅ Use proper async patterns
export function useUserData() {
  return useQuery({
    key: 'user-data',
    query: () => fetchUser(),
  })
}
```

### 3. Use readonly() for State
```typescript
// ✅ Prevent external mutation
export function useCounter() {
  const count = ref(0)
  const increment = () => count.value++
  
  return {
    count: readonly(count),
    increment,
  }
}
```

### 4. SSR-Safe Global State
```typescript
// ❌ Global refs break SSR
const globalState = ref('value')

// ✅ Use useState (Nuxt) or proper SSR patterns
export function useGlobalState() {
  return useState('global-state', () => 'value')
}
```

### 5. MaybeRef Parameters
```typescript
// ✅ Accept both refs and values
export function useFormatter(value: MaybeRef<number>) {
  const formatted = computed(() => formatNumber(toValue(value)))
  return { formatted }
}
```

## SSR Safety

### Check Client-Side Context
```typescript
// ✅ Safe browser-only code
export function useGeolocation() {
  const location = ref<Position | null>(null)
  
  const getCurrentPosition = () => {
    if (import.meta.client && navigator.geolocation) {
      navigator.geolocation.getCurrentPosition(
        pos => location.value = pos
      )
    }
  }
  
  return { location, getCurrentPosition }
}
```

### Server vs Client Logic
```typescript
// ✅ Handle different environments
export function useLocale() {
  return useState('locale', () =>
    import.meta.server
      ? getServerLocale()
      : navigator.language || 'en-US'
  )
}
```

## Data Fetching

### Static Build Data
```typescript
// ✅ Data included in build
export function useStaticContent() {
  return useAsyncData('content', () => fetchContent())
}
```

### Client-Side Data
```typescript
// ✅ Fresh data on each visit
export function useLiveData() {
  return useQuery({
    key: 'live-data',
    query: () => fetchLiveData(),
    staleTime: 60 * 1000,
  })
}
```

### Dependent Queries
```typescript
// ✅ Handle dependencies
export function useUserPosts() {
  const userQuery = useQuery({
    key: 'user',
    query: () => fetchUser(),
  })
  
  const postsQuery = useQuery({
    key: computed(() => ['posts', userQuery.data.value?.id]),
    query: () => fetchPosts(userQuery.data.value!.id),
    enabled: computed(() => !!userQuery.data.value?.id),
  })
  
  return { user: userQuery.data, posts: postsQuery.data }
}
```

## Structure & Best Practices

- **Naming**: `useFeatureName.ts` → `export function useFeatureName()`
- **Parameters**: Use options object for multiple params
- **Returns**: Consistent structure with readonly refs
- **Cleanup**: Use VueUse or proper lifecycle hooks
- **SSR**: Use `useState` for global state, check `import.meta.client` for browser APIs
- **Data**: Use `useAsyncData` for build-time, `useQuery` for runtime data
- **Dependencies**: Use `enabled` flags for dependent queries
# Vue Composables Best Practices

## Core Rules

### 1. Check VueUse First
**Always check [VueUse](https://vueuse.org/) before creating composables**

Use the `context7` tools to search VueUse official documentation for existing solutions.

```typescript
// ❌ Don't reinvent
export function useLocalState(key: string, defaultValue: any) {
  // custom localStorage logic...
}

// ✅ Use VueUse
import { useLocalStorage } from '@vueuse/core'
export function useSettings() {
  return useLocalStorage('settings', defaultSettings)
}
```

### 2. Never Make Composables Async
```typescript
// ❌ Don't return promises
export async function useUserData() {
  const user = await fetchUser()
  return { user }
}

// ✅ Use proper async patterns
export function useUserData() {
  return useQuery({
    key: 'user-data',
    query: () => fetchUser(),
  })
}
```

### 3. Use readonly() for State
```typescript
// ✅ Prevent external mutation
export function useCounter() {
  const count = ref(0)
  const increment = () => count.value++
  
  return {
    count: readonly(count),
    increment,
  }
}
```

### 4. SSR-Safe Global State
```typescript
// ❌ Global refs break SSR
const globalState = ref('value')

// ✅ Use useState (Nuxt) or proper SSR patterns
export function useGlobalState() {
  return useState('global-state', () => 'value')
}
```

### 5. MaybeRef Parameters
```typescript
// ✅ Accept both refs and values
export function useFormatter(value: MaybeRef<number>) {
  const formatted = computed(() => formatNumber(toValue(value)))
  return { formatted }
}
```

## SSR Safety

### Check Client-Side Context
```typescript
// ✅ Safe browser-only code
export function useGeolocation() {
  const location = ref<Position | null>(null)
  
  const getCurrentPosition = () => {
    if (import.meta.client && navigator.geolocation) {
      navigator.geolocation.getCurrentPosition(
        pos => location.value = pos
      )
    }
  }
  
  return { location, getCurrentPosition }
}
```

### Server vs Client Logic
```typescript
// ✅ Handle different environments
export function useLocale() {
  return useState('locale', () =>
    import.meta.server
      ? getServerLocale()
      : navigator.language || 'en-US'
  )
}
```

## Data Fetching

### Static Build Data
```typescript
// ✅ Data included in build
export function useStaticContent() {
  return useAsyncData('content', () => fetchContent())
}
```

### Client-Side Data
```typescript
// ✅ Fresh data on each visit
export function useLiveData() {
  return useQuery({
    key: 'live-data',
    query: () => fetchLiveData(),
    staleTime: 60 * 1000,
  })
}
```

### Dependent Queries
```typescript
// ✅ Handle dependencies
export function useUserPosts() {
  const userQuery = useQuery({
    key: 'user',
    query: () => fetchUser(),
  })
  
  const postsQuery = useQuery({
    key: computed(() => ['posts', userQuery.data.value?.id]),
    query: () => fetchPosts(userQuery.data.value!.id),
    enabled: computed(() => !!userQuery.data.value?.id),
  })
  
  return { user: userQuery.data, posts: postsQuery.data }
}
```

## Structure & Best Practices

- **Naming**: `useFeatureName.ts` → `export function useFeatureName()`
- **Parameters**: Use options object for multiple params
- **Returns**: Consistent structure with readonly refs
- **Cleanup**: Use VueUse or proper lifecycle hooks
- **SSR**: Use `useState` for global state, check `import.meta.client` for browser APIs
- **Data**: Use `useAsyncData` for build-time, `useQuery` for runtime data
- **Dependencies**: Use `enabled` flags for dependent queries
