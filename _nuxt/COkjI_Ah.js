import { a as T, _ as j } from "./BGvdrQbp.js";
import { _ as q } from "./skKO6Fnq.js";
import { _ as U } from "./D-k9HlQ8.js";
import { d as V, aC as H, aD as O, ay as z, r as N, bB as D, Q as E, n as F, B as g, o as k, h as n, C as e, v as G, H as P, I as K, L as A, aL as Q, l as J, G as y, E as f, q as W, a as I, g as o, M as S, f as b, x as C, N as X } from "./B8biU-UE.js";
import { u as Y, d as Z } from "./niYDnyAi.js";
import { u as L } from "./DOgGst0G.js";
import { _ as ee } from "./DlAUqK2U.js";
import { g as te } from "./CpsPJSKh.js";
import "./uct_JH4F.js";
import "./DBRxGtFx.js";
import "./CoPlYyca.js";
import "./D0DW2WUk.js";
import "./B5vKjtsS.js";
const ae = ["id"], le = ["data-state"], ne = ["value"], oe = { text: "12 neutral-800 data-active:neutral-0", "lh-none": "", "tracking-0.8": "", "px-8": "", "py-4": "", "cursor-pointer": "", "transition-colors": "", relative: "", "nq-label": "" }, se = V({ __name: "RadioInput", props: H({ options: {}, isSelected: { type: Function }, getLabel: { type: Function, default: (p) => p } }, { modelValue: {}, modelModifiers: {} }), emits: ["update:modelValue"], setup(p) {
  const a = O(p, "modelValue"), c = p.isSelected || ((d) => d === a.value), m = z("pill"), v = N(), r = D();
  async function _() {
    var _a;
    if (await W(), !(m == null ? void 0 : m.value)) return;
    const d = m.value.parentElement.getBoundingClientRect(), { width: u, left: s } = ((_a = document.querySelector(`#${r} [data-state="active"]`)) == null ? void 0 : _a.getBoundingClientRect()) || { width: 0, left: 0 };
    v.value = { width: `${u}px`, left: `${s - d.left}px` };
  }
  return E(a, _), F(_), (d, u) => (k(), g("div", { id: n(r), flex: "~ gap-2 items-center", group: "", "rounded-4": "", "bg-neutral-200": "", "w-max": "", relative: "" }, [e("div", { ref_key: "pill", ref: m, "group-focus-visible:ring": "1.5 blue offset-1 offset-white", style: G(n(v)), "rounded-4": "", "bg-neutral": "", "ease-out": "", "inset-y-0": "", absolute: "", transition: "[left,width,background-color]" }, null, 4), (k(true), g(P, null, K(d.options, (s, x) => (k(), g("label", { key: x, "z-1": "", "data-state": n(c)(s) ? "active" : void 0 }, [A(e("input", { "onUpdate:modelValue": u[0] || (u[0] = (i) => a.value = i), type: "radio", value: s, "sr-only": "" }, null, 8, ne), [[Q, a.value]]), e("div", oe, [J(d.$slots, "label", { option: s }, () => [y(f(d.getLabel(s)), 1)])])], 8, le))), 128))], 8, ae));
} }), ie = Object.assign(se, { __name: "RadioInput" }), de = { flex: "~ col gap-y-16 md:items-center" }, ue = { "text-12": "", "w-max": "", "nq-label": "" }, re = { ring: "1.5 neutral-400", "mx-auto": "", "rounded-4": "", "bg-neutral-0": "", "max-w-full": "", "w-max": "", shadow: "", flex: "~ items-center wrap" }, me = { grid: "~ max-md:cols-1 md:rows-[auto_1fr] gap-x-32 gap-y-12 md:flow-col ", "mx-auto": "", "p-32": "", "of-auto": "" }, pe = { text: "max-md:center neutral-800", "font-semibold": "" }, ce = { flex: "~ items-baseline gap-8", text: "neutral hocus:blue focus-within:blue", "h-max": "", "w-max": "", "transition-colors": "", "self-end": "", "max-md:mx-auto": "" }, fe = { flex: "~ gap-8 items-center max-md:justify-center", "max-md:mt-8": "" }, ge = { key: 0, class: "blink", "rounded-full": "", "bg-green": "", "size-4": "", "right-2": "", "top-2": "", absolute: "" }, ke = { flex: "~ gap-8 items-center max-md:justify-center", "max-md:mt-8": "" }, _e = { "w-max": "" }, be = { flex: "~ col md:justify-center items-center md:items-end", bg: "green/10", rounded: "b-4 md:b-0 md:r-4", "px-32": "", "py-24": "", "flex-1": "", "self-stretch": "" }, ye = { flex: "~ items-center", "text-neutral-800": "" }, ve = { text: "green/60 right", "font-bold": "", "w-8ch": "", "lg:ml-auto": "" }, xe = { text: "28 green", "font-semibold": "", "lh-none": "", "mt-12": "" }, we = { text: "max-md:center green-1100", "font-semibold": "" }, he = { flex: "~ items-center max-md:justify-center" }, Se = { "ml-12": "", "mr-6": "", "cursor-pointer": "" }, R = "staking-calculator", Le = V({ __name: "Calculator", props: { title: {}, stakingAmountLabel: {}, initialStakingAmount: { default: 1e6 }, stakedSupplyLabel: {}, stakedSupplyInfo: {}, stakingPeriodLabel: {}, stakingPeriodInfo: {}, autoRestakeLabel: {}, stakingRewardsLabel: {}, autoRestakeInfo: {}, note: {} }, setup(p) {
  const a = N(0), c = L(`${R}_amount`, p.initialStakingAmount), { stakingRatio: m } = Y(), v = I(() => m.value ? ["Low", "Middle", "High", "Live"] : ["Low", "Middle", "High"]), r = L(`${R}_staked-supply`, "Live"), _ = I(() => ({ Low: 0.25, Middle: 0.5, High: 0.75, Live: m.value })), d = [{ label: "1m", days: 30 }, { label: "3m", days: 90 }, { label: "6m", days: 180 }, { label: "1y", days: 360 }, { label: "5y", days: 1800 }], u = L(`${R}_staking-period`, d.at(-2)), s = L(`${R}_auto-restake}`, true), x = I(() => Z({ amount: c.value, days: u.value.days, stakedSupplyRatio: _.value[r.value], autoRestake: s.value }));
  return (i, t) => {
    const B = T, w = q, h = U, $ = ie, M = j;
    return k(), g("div", de, [e("h2", ue, f(i.title), 1), e("div", re, [e("div", me, [e("span", pe, f(i.stakingAmountLabel), 1), e("label", ce, [o(B, { modelValue: n(c), "onUpdate:modelValue": t[0] || (t[0] = (l) => S(c) ? c.value = l : null), decimals: n(a), min: 1, style: { padding: "0" }, "outline-none": "", "max-w-9ch": "", "min-w-0": "", "w-max": "", "shadow-none": "", text: "blue f-2xl" }, null, 8, ["modelValue", "decimals"]), t[4] || (t[4] = e("span", { "font-bold": "", "lh-none": "", "flex-1": "", text: "blue f-lg" }, "NIM", -1))]), e("div", fe, [t[5] || (t[5] = e("span", { "w-max": "" }, "Total stake", -1)), o(h, null, { default: b(() => [o(w, { wrapper: "div", field: i.stakedSupplyInfo }, null, 8, ["field"])]), _: 1 })]), o($, { modelValue: n(r), "onUpdate:modelValue": t[1] || (t[1] = (l) => S(r) ? r.value = l : null), options: n(v), "h-max": "", "self-end": "", "max-md:mx-auto": "" }, { label: b(({ option: l }) => [n(_)[l] !== void 0 && n(_)[l] >= 0 ? (k(), g(P, { key: 0 }, [e("span", null, f(l), 1), l === n(r) && n(r) === "Live" ? (k(), g("div", ge)) : C("", true)], 64)) : C("", true)]), _: 1 }, 8, ["modelValue", "options"]), e("div", ke, [e("p", _e, f(i.stakingPeriodLabel), 1), o(h, null, { default: b(() => [o(w, { wrapper: "div", field: i.stakingPeriodInfo }, null, 8, ["field"])]), _: 1 })]), o($, { modelValue: n(u), "onUpdate:modelValue": t[2] || (t[2] = (l) => S(u) ? u.value = l : null), "h-max": "", "self-end": "", "max-md:mx-auto": "", options: d, "get-label": (l) => l.label, "is-selected": (l) => {
      var _a;
      return l.days === ((_a = n(u)) == null ? void 0 : _a.days);
    } }, null, 8, ["modelValue", "get-label", "is-selected"])]), e("div", be, [e("div", ye, [t[8] || (t[8] = e("p", { "mr-8": "" }, " Return in NIM* ", -1)), o(h, { "mr-16": "" }, { default: b(() => [o(w, { wrapper: "div", field: i.autoRestakeInfo }, null, 8, ["field"])]), _: 1 }), e("p", ve, [t[6] || (t[6] = y(" +")), o(M, { value: n(x).gainRatio * 100, duration: 1e3, decimals: 2 }, null, 8, ["value"]), t[7] || (t[7] = y("% "))])]), e("span", xe, [t[9] || (t[9] = y(" +")), o(M, { value: n(x).gain, duration: 1e3 }, null, 8, ["value"]), t[10] || (t[10] = y(" NIM "))])])]), e("p", we, f(i.note), 1), e("label", he, [A(e("input", { "onUpdate:modelValue": t[3] || (t[3] = (l) => S(s) ? s.value = l : null), type: "checkbox", "nq-switch": "" }, null, 512), [[X, n(s)]]), e("span", Se, f(i.autoRestakeLabel), 1), o(h, null, { default: b(() => [o(w, { wrapper: "div", field: i.autoRestakeInfo }, null, 8, ["field"])]), _: 1 })])]);
  };
} }), Re = Object.assign(ee(Le, [["__scopeId", "data-v-78379cf6"]]), { __name: "StakingCalculator" }), Ie = { "bg-neutral-100": "" }, Oe = V({ __name: "index", props: te(), setup(p) {
  return (a, c) => {
    const m = Re;
    return k(), g("section", Ie, [o(m, { title: a.slice.primary.title, "auto-restake-info": a.slice.primary.autoRestakeInfo, "auto-restake-label": a.slice.primary.autoRestakeLabel, "initial-staking-amount": a.slice.primary.initialStakingAmount, "staking-amount-label": a.slice.primary.stakingAmountLabel, "staking-period-info": a.slice.primary.stakingPeriodInfo, "staking-period-label": a.slice.primary.stakingPeriodLabel, "staking-rewards-label": a.slice.primary.stakingRewardsLabel, "staked-supply-info": a.slice.primary.stakedSupplyInfo, "staked-supply-label": a.slice.primary.stakedSupplyLabel, note: a.slice.primary.note }, null, 8, ["title", "auto-restake-info", "auto-restake-label", "initial-staking-amount", "staking-amount-label", "staking-period-info", "staking-period-label", "staking-rewards-label", "staked-supply-info", "staked-supply-label", "note"])]);
  };
} });
export {
  Oe as default
};
